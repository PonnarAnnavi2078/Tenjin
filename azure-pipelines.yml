trigger:
  - main

pool:
  name: Default
  demands:
    - agent.name -equals tt6

variables:
  IPADDR: 'https://yethi-test.tenjinonline.com'
  INSID: 'yethi-test'
  APITOKEN: 'NCd+02m6fCBwvAKY88Ud9Bqps36rCWLh2MK6IEGlwOnwhWGX0cdE1g/TgEdrSuO0ImA7Bdi8eu874XIMAfTL8WqQffMTN7eIs535mljZjwiPRIptfxsDWG84Z3Ig0yiMxJ+gNlNjJpwdD5ljkQ7W4S3/+K09y5tlSz/v+UB2/+LahiNcqffzcndj03KAbkMYGlai59wgeS7Goz3EvNHFdB6cIHCVwkCsSFg+lUtPrknemJHkIMsvjxJr1flY8mCi84Waj14J0mPZGtQ+5vmxeJps9J6/rI9KSzh8UiBi7pm1sSx5U8bagRcsbOnJJWMlP6yxd5LqDM4sdA4ycPhOQw=='
  AGENTNAME: 'Akshay-prod'
  INCLUDECLOUDDEVICE: 'FALSE'
  INCLUDECLOUDBROWSER: 'FALSE'
  DEVICENAME: ''
  PROJECTKEY: 'JPD'
  BROWSER: 'chrome'
  REGION: 'UTC+05:30'
  TESTRUNID: 'Test-Run-13381419'
  ISCLOUDAGENT: 'FALSE'
  BROWSERVERSION: ''
  OS: 'Linux'
  RUNONLYFAILED: 'FALSE'

steps:
  - script: |
      echo "Installing dependencies..."
      sudo apt-get update -y
      command -v curl >/dev/null 2>&1 || sudo apt-get install -y curl
      command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq
    displayName: 'Install dependencies'

  - script: |
      echo "Starting Execute Test Run step..."
      # Use jq to safely build JSON
      JSON_PAYLOAD=$(jq -n \
        --arg agentName "$AGENTNAME" \
        --arg includeCloudDevice "$INCLUDECLOUDDEVICE" \
        --arg includeCloudBrowser "$INCLUDECLOUDBROWSER" \
        --arg device "$DEVICENAME" \
        --arg projectKey "$PROJECTKEY" \
        --arg browser "$BROWSER" \
        --arg region "$REGION" \
        --arg testRunId "$TESTRUNID" \
        --arg cloudAgent "$ISCLOUDAGENT" \
        --arg browserVersion "$BROWSERVERSION" \
        --arg os "$OS" \
        --arg reRunFailedCases "$RUNONLYFAILED" \
        '{
          agentName: $agentName,
          includeCloudDevice: $includeCloudDevice,
          includeCloudBrowser: $includeCloudBrowser,
          device: $device,
          projectKey: $projectKey,
          browser: $browser,
          region: $region,
          testRunId: $testRunId,
          cloudAgent: $cloudAgent,
          browserVersion: $browserVersion,
          os: $os,
          reRunFailedCases: $reRunFailedCases
        }')

      EXECUTE=$(curl -s -k -X POST "$(IPADDR)/api/rest/1/execute/testrun" \
        -H "Content-Type: application/json" \
        -H "X-INS-ID: $(INSID)" \
        -H "X-API-TOKEN: $(APITOKEN)" \
        -d "$JSON_PAYLOAD")

      echo "EXECUTE response: $EXECUTE"

      TEST_RUN_ID=$(echo $EXECUTE | jq -r '.testRunId')
      echo "Test Run ID: $TEST_RUN_ID"

      if [ -z "$TEST_RUN_ID" ] || [ "$TEST_RUN_ID" == "null" ]; then
        echo "Failed to retrieve test run ID"
        exit 1
      fi
    displayName: 'Execute Test Run'

  - script: |
      echo "Starting Monitor Test Run status step..."
      status=''
      agentstatus=''
      result=''
      count=0
      end_time=$(($(date +%s) + 3600))

      while [[ $status != 'COMPLETED' && $agentstatus != 'TERMINATED' && $agentstatus != 'ERROR' && $(date +%s) -lt $end_time ]]; do
        echo "Loop count: $count"
        echo "Fetching status for test run ID: $TEST_RUN_ID"
        response=$(curl -s -k --request GET "$(IPADDR)/api/rest/1/testruns/$TEST_RUN_ID/runstatus" \
          --header 'Content-Type: application/json' \
          --header "X-INS-ID: $(INSID)" \
          --header "X-API-TOKEN: $(APITOKEN)")

        echo "API response: $response"
        status=$(echo $response | jq -r '.status')
        result=$(echo $response | jq -r '.result')
        agentstatus=$(echo $response | jq -r '.cloudAgentStatus')

        echo "Parsed status: $status"
        echo "Parsed result: $result"
        echo "Parsed agent status: $agentstatus"

        sleep 20
        count=$((count+1))

        if [[ $result == 'FAIL' || $status == 'null' ]]; then
          echo "Result status is $result"
          exit 1
        else
          echo "Result status is $result"
        fi
      done
    displayName: 'Monitor Test Run'
