trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'
    
variables:
  IPADDR: 'https://yethi-test.tenjinonline.com'
  INSID: 'yethi-test'
  APITOKEN: 'PTBObDiIJfEjGjQ6a8B+czxjxGVRlRrOO3Tgxj3csQPwz7mLSzAJbLtvEKnZfhpgomYv7bM0F04EpcfjQ30ce/JspffvHKmHqZ8oX5oAQXW0Drwbx9GJeBrc0vdK27/HfxOEk7KQkR1DxbGpcObx21wYKs/Ufhv0VLXdTbVUYqVfjDSbEL36GumM0Xz2ElkG5y7iKt0weZBAlLbQGPUDOWwgTIPBQTrnE51iQKpp7FLNYKmpmczfm7a9GcNFcGh2KbwqlN8Bya3q4aWdKqGqMWjdcTfsnEhfqBXmYb7i/1/N0aDVZKuXg/50bzbNwURx5Cp3oqr7fYeodle3Rgw+jw=='
  AGENTNAME: 'Ponnar-agent'
  INCLUDECLOUDDEVICE: 'FALSE'
  INCLUDECLOUDBROWSER: 'FALSE'
  DEVICENAME: ''
  PROJECTKEY: 'JPD'
  BROWSER: 'chrome'
  REGION: 'UTC+05:30'
  TESTRUNID: 'Test-Run-13381419'
  ISCLOUDAGENT: 'FALSE'
  BROWSERVERSION: ''
  OS: 'Windows 8.1'
  RUNONLYFAILED: 'FALSE'

steps:
  - script: |
      echo "Installing dependencies..."
      sudo apt-get update -y
      command -v curl >/dev/null 2>&1 || sudo apt-get install -y curl
      command -v jq >/dev/null 2>&1 || sudo apt-get install -y jq
    displayName: 'Install dependencies'

  - script: |
      echo "Starting Execute Test Run..."
      EXECUTE=$(curl -s -k -X POST "$IPADDR/api/rest/1/execute/testrun" \
        -H "Content-Type: application/json" \
        -H "X-INS-ID: $INSID" \
        -H "X-API-TOKEN: $APITOKEN" \
        -d '{
          "agentName": "'"$AGENTNAME"'",
          "includeCloudDevice": "'"$INCLUDECLOUDDEVICE"'",
          "includeCloudBrowser": "'"$INCLUDECLOUDBROWSER"'",
          "device": "'"$DEVICENAME"'",
          "projectKey": "'"$PROJECTKEY"'",
          "browser": "'"$BROWSER"'",
          "region": "'"$REGION"'",
          "testRunId": "'"$TESTRUNID"'",
          "cloudAgent": "'"$ISCLOUDAGENT"'",
          "browserVersion": "'"$BROWSERVERSION"'",
          "os": "'"$OS"'",
          "reRunFailedCases": "'"$RUNONLYFAILED"'"
        }')
      echo "EXECUTE response: $EXECUTE"

      TEST_RUN_ID=$(echo $EXECUTE | jq -r '.testRunId')
      echo "Test Run ID: $TEST_RUN_ID"

      if [ -z "$TEST_RUN_ID" ] || [ "$TEST_RUN_ID" == "null" ]; then
        echo "Failed to retrieve test run ID"
        exit 1
      fi

      # Only monitor if cloud agent is TRUE
      if [ "$ISCLOUDAGENT" == "TRUE" ]; then
        echo "Cloud agent detected. Monitoring test run..."
        status=''
        agentstatus=''
        result=''
        end_time=$(($(date +%s) + 3600)) # 1 hour timeout
        count=0

        while [[ $status != 'COMPLETED' && $agentstatus != 'TERMINATED' && $agentstatus != 'ERROR' && $(date +%s) -lt $end_time ]]; do
          echo "Loop count: $count"
          response=$(curl -s -k "$IPADDR/api/rest/1/testruns/$TEST_RUN_ID/runstatus" \
            -H "Content-Type: application/json" \
            -H "X-INS-ID: $INSID" \
            -H "X-API-TOKEN: $APITOKEN")
          echo "API response: $response"

          status=$(echo $response | jq -r '.status')
          result=$(echo $response | jq -r '.result')
          agentstatus=$(echo $response | jq -r '.cloudAgentStatus')

          echo "Parsed status: $status"
          echo "Parsed result: $result"
          echo "Parsed agent status: $agentstatus"

          if [[ $result == 'FAIL' || $status == 'null' ]]; then
            echo "Test run failed or invalid."
            exit 1
          fi

          sleep 20
          count=$((count+1))
        done
      else
        echo "Default/local agent. Skipping monitor step."
      fi
    displayName: 'Execute and Monitor Test Run'
